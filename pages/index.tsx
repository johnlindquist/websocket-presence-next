import Head from "next/head"
import { useCallback, useEffect, useRef, useState } from "react"
import { io, Socket } from "socket.io-client"
import Avatar from "react-avatar"

type Message = { sender: string; recipient: string; text: string }

export default function Home() {
  const [sender, setSender] = useState("")
  const socket = useRef<Socket>()
  const [messages, setMessages] = useState<Message[]>([])
  const [ids, setIds] = useState<string[]>([])

  useEffect(() => {
    if (socket.current) return
    socket.current = io("https://ef4fb7-3000.preview.csb.app")
    socket.current.on("connect", () => {
      console.log(`Connected to socket.io server`)
      setSender(socket?.current?.id || "")
    })
    socket.current.on("disconnect", () => {
      setSender("")
    })

    return () => {
      socket.current?.disconnect()
      socket.current = undefined
    }
  }, [])

  const sendMessage = useCallback((message: Message) => {
    socket.current?.emit("message", message)
  }, [])

  useEffect(() => {
    socket.current?.on("message", (message: Message) => {
      console.log(`Received message: ${message}`)
      setMessages(messages => [...messages, message])
    })

    socket.current?.on("users", (ids: string[]) => {
      console.log(`Users: ${ids}`)
      setIds(ids)
    })

    return () => {
      socket.current?.off("message")
      socket.current?.off("user-connected")
      socket.current?.off("user-disconnected")
    }
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-4 flex flex-col">
        <h1 className="text-2xl py-2">You are {sender ? sender : "disconnected"}</h1>
        <h2 className="text-xl py-2">Click on an avatar to say Hi</h2>
        {/* Display all the users */}
        <ul className="flex py-2">
          {ids.map(id => {
            const youOrId = id === sender ? "Y O U" : id
            return (
              <li key={id} className="px-1">
                <Avatar
                  name={youOrId}
                  size="50"
                  round
                  onClick={() => {
                    sendMessage({
                      sender: sender,
                      recipient: id,
                      text: "Hi",
                    })
                  }}
                />
              </li>
            )
          })}
        </ul>
        {/* List all the messages */}
        <ul>
          {messages.map((message, index) => (
            <li key={index}>{`${message.sender === sender ? "You" : message.sender} -> ${
              message.recipient === sender ? "You" : message.recipient
            }: ${message.text}`}</li>
          ))}
        </ul>
      </main>
    </>
  )
}
